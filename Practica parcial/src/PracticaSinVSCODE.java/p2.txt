ABSTRACTA:
public abstract ArrayList<String> getPalClaves(); //1 sin repetir
public abstract ArrayList<Simple> getSimpleQue(Filtro f); //2
public ArrayList<Simple> getSimpleQueOrdenado(Filtro f, Comparator<Simple> c) { //3
    ArrayList<Simple> cumplen = getSimpleQue(f);
    Collections.sort(cumplen, c);
    return cumplen;
}
public abstract Abstracta getCopiaFiltrada(Filtro f); //4

public abstract int getTotal() //5 cada simple puede calcularse de distinta forma


------------------------------------------------------
SIMPLE:

private ArrayList<String> palClaves; // atributo 
private Condicion costo; //suponemos que son distintas formas de calcular X costo;

CONSTRUCTOR(Condicion costo) {
    
}

public void setPalClave(String pal) {
   
}

@Override //1
public ArrayList<String> getPalClaves() {
   
}

@Override //2
public ArrayList<Simple> getSimpleQue(Filtro f) {

}

@Override //4
public Abstracta getCopiaFiltrada(Filtro f) {
  
}


@Override //5
public int getTotal() {
    
}

-------------------------------------------------------
COMPUESTA:

private ArrayList<Abstracta> elementos; // atributo 
CONSTRUCTOR() {
    
}

public ArrayList<Abstracta> getElementos() {
 
}

//Agrego por onden de llegada:
public void addElemento(Abstracta e) {
   
}

//Agrego ordenado por X
public void addElemento(Abstracta elemento, Comparator<Abstracta> c) { // o el comparador como atributo
    int pos = 0;
    for(Abstrtacta e : elementos) {
        if(c.compare(elemento, e) < 0) {
            break;
        }
        pos++
    }
    elementos.add(pos, elemento);
}
             -------- O -----------
public void addElemento(Abstracta elemento, Comparator<Abstracta> c) { // o el comparador como atributo
  
}


@Override //1
public ArrayList<String> getPalClaves() {
  
}

@Override //2
public ArrayList<Simple> getSimpleQue(Filtro f) {
    
}

@Override //4
public Abstracta getCopiaFiltrada(Filtro f) {

}   

@Override //5
public int getTotal() {
 
}

-----------------------------------------------------------------------------------------
FILTROS:

 Filtro:
 public abstract class Filtro(){
    
 }

    Filtro CONDICION extends Filtro {
    private int/String/double.. dato;

    public Condicion(tipoDato dato) {
        this.dato = dato;
    }
    GETTERS AND SETTERS

    @Override
        public boolean cumple(Simple s) {
           
        }
    }

Filtros Logicos:
-AND Y OR:

public class FiltroAnd/FiltroOr extends Filtro {
  

    public FiltroAnd/FiltroOr() {
        
    }
    GETTERS AND SETTERS
    @Override 
    public boolean cumple(Simple s) {
     
    }
}

-NOT:

public class FiltroNot extends Filtro {

    public FiltroNot(Filtro f) {
        
    }
    GETTERS AND SETTERS
    @Override
    public boolean cumple(Simple s) {
        
    }
}

-----------------------------------------------------------------------------------------
CONDICION (Strateggy):

public abstract class Costo {
    public abstract int getCosto( Simple s);
}

FORMAS DE CALCULAR COSTO:

-Costo fijo:
public class CostoFijo extends Costo {
   
    @Override
    public int getCosto(Simple s) {
       
    }
}

-Costo X hs:
public class CostoXHs extends Costo {
    
    public CostoXHs() {
        
    }
    GETTERS Y SETTERS
    @Override
    public int getCosto(Simple s) {
        
    }
}

-Costo X palClave:
public class CostoXPalClave extends Costo {
    
    public CostoXHs(int costo) {
        
    }
    GETTERS Y SETTERS
    @Override
    public int getCosto(Simple s) {
       ;
    }
}

-----------------------------------------------------------------------------------------
COMPARADORES: Ejemplo comparador por:

-Nombre:
 public class ComparadorNombre implements Comparator<Simple> {
    @Override
    public int compare(Simple s1, Simple s2) {
        //Ordena de MENOR a MAYOR:
        

        //para ordenar de MAYOR a MENOR:
        
                            O
        
 }

-Dni:
 public class ComparadorNombre implements Comparator<Simple> {
    @Override
    public int compare(Simple s1, Simple s2) {
        //Ordena de MENOR a MAYOR:
       

        //para ordenar de MAYOR a MENOR:
         
                            O
        
    }
 }

-Nombre y dni:
public class ComparadorAnd implements Comparator<Simple> {
   

    public ComparadorAnd() {
        
    }
    GETTERS Y SETTERS
    @Override
    public int compare(Simple s1, Simple s2) {
      
    }
 }
 ---------------------------------------------------------------------------------------

